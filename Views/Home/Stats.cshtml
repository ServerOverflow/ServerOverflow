@{
    ViewData["Description"] = "Statistics";
    ViewData["Title"] = "Statistics";
}

<div class="section">
    <div class="content">
        <h2>General statistics</h2>
        <p>This graph is updated hourly. Only entries for the last 24 hours are shown.</p>
        <div id="general" class="chart"></div>
        
        <h2>Modding statistics</h2>
        <p>This graph is updated hourly. Only entries for the last 24 hours are shown.</p>
        <div id="modding" class="chart"></div>
        
        <h2>Custom software</h2>
        <p>Only the 10 most popular are shown.</p>
        <div id="software" class="chart"></div>

        <h2>Minecraft versions</h2>
        <p>Only the 10 most popular are shown.</p>
        <div id="versions" class="chart"></div>
        
        <h2>Forge mods</h2>
        <p>Only the 10 most popular are shown.</p>
        <div id="mods" class="chart"></div>
    </div>
</div>

<script>
    function get(arr, num) {
        let out = [];
        let stamp = Date.now() - (num - 1) * 3600000;
        if (arr.length < num)
            for (let i = 0; i < num - arr.length; i++) {
                out.push([stamp, 0]);
                stamp += 3600000;
            }
        
        for (let i = Math.max(arr.length - num, 0); i < arr.length; i++) {
            if (Array.isArray(arr[i])) out.push([stamp, arr[i][1]]);
            else out.push([stamp, arr[i]]);
            stamp += 3600000;
        }
        
        return out;
    }
    
    function getLabels(dict) {
        let list = [];
        for (let i = 0; i < dict.length; i++)
            list.push(dict[i][0]);
        
        return list;
    }

    let forgeMods = [@string.Join(",", Stats.ForgeModsPopularity.Take(10).Select(x => $"[\"{x.Key}\",{x.Value}]"))];
    let software = [@string.Join(",", Stats.SoftwarePopularity.Take(10).Select(x => $"[\"{x.Key}\",{x.Value}]"))];
    let versions = [@string.Join(",", Stats.VersionPopularity.Take(10).Select(x => $"[\"{x.Key}\",{x.Value}]"))];
    let customSoftware = [@string.Join(",", Stats.CustomSoftware.Take(24))];
    let chatReporting = [@string.Join(",", Stats.ChatReporting.Take(24))];
    let totalServers = [@string.Join(",", Stats.TotalServers.Take(24))];
    let forgeServers = [@string.Join(",", Stats.ForgeServers.Take(24))];
    let onlineMode = [@string.Join(",", Stats.OnlineMode.Take(24))];
    let antiDDoS = [@string.Join(",", Stats.AntiDDoS.Take(24))];
    
    let general = new ApexCharts($("#general")[0], {
        series: [{
            name: 'All servers',
            data: get(totalServers, 24)
        }, {
            name: 'Chat reporting enabled',
            data: get(chatReporting, 24)
        }, {
            name: 'Online mode enabled',
            data: get(onlineMode, 24)
        }, {
            name: 'Anti-DDoS proxy',
            data: get(antiDDoS, 24)
        }],
        chart: {
            height: 350,
            type: 'area'
        },
        dataLabels: {
            enabled: true
        },
        stroke: {
            curve: 'smooth'
        },
        xaxis: {
            type: 'datetime'
        },
        tooltip: {
            enabledOnSeries: false,
            x: {
                format: 'HH:mm'
            }
        },
        yaxis: {
            labels: {
                formatter: function (value) {
                    return `${value} servers`;
        		}
            }
        }
    });
    general.render();

    let modding = new ApexCharts($("#modding")[0], {
        series: [{
            name: 'All servers',
            data: get(totalServers, 24)
        }, {
            name: 'Forge servers',
            data: get(forgeServers, 24)
        }, {
            name: 'Custom software',
            data: get(customSoftware, 24)
        }],
        chart: {
            height: 350,
            type: 'area'
        },
        dataLabels: {
            enabled: true
        },
        stroke: {
            curve: 'smooth'
        },
        xaxis: {
            type: 'datetime'
        },
        tooltip: {
            enabledOnSeries: false,
            x: {
                format: 'HH:mm'
            }
        },
        yaxis: {
            labels: {
                formatter: function (value) {
                    return `${value} servers`;
                }
            }
        }
    });
    modding.render();

    let softwareChart = new ApexCharts($("#software")[0], {
        series: [get(software, 10)],
        chart: {
            width: 380,
            type: 'pie',
        },
        labels: [getLabels(software)],
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 200
                },
                legend: {
                    position: 'bottom'
                }
            }
        }]
    });
    softwareChart.render();

    let versionsChart = new ApexCharts($("#versions")[0], {
        series: [get(versions, 10)],
        chart: {
            width: 380,
            type: 'pie',
        },
        labels: [getLabels(versions)],
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 200
                },
                legend: {
                    position: 'bottom'
                }
            }
        }]
    });
    versionsChart.render();

    let modsChart = new ApexCharts($("#mods")[0], {
        series: [get(forgeMods, 10)],
        chart: {
            width: 380,
            type: 'pie',
        },
        labels: [getLabels(forgeMods)],
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 200
                },
                legend: {
                    position: 'bottom'
                }
            }
        }]
    });
    modsChart.render();
</script>